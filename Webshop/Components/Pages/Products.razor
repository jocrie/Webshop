@page "/products/"
@page "/products/{id:int}"
@using Webshop.Components.UIcomponents
@using Microsoft.AspNetCore.Identity
@using Webshop.Enums
@using System.Text.Json
@using System.Text.Json.Serialization

@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider StateProvider
@inject WebshopService ws
@inject UserManager<ApplicationUser> UserManager


@rendermode InteractiveServer

<Header @ref="headerRef" noCartItems="user.CartItems.Sum(i => i.Quantity)"/>

<div style="display: flex; justify-content: flex-end">
    <select class="px-1 py-1 text-center" @onchange="UpdateCurrency">
        @foreach (Currencies currency in Enum.GetValues(typeof(Currencies)))
        {
            <option value="@currency">@currency.ToString()</option>
        }
    </select>
</div>

@if (products is null)
{
    <p>Loading...</p>
}
else
{
    @if (Id is null)
    {
        @* All products *@

        <div class="row row-cols-1 row-cols-lg-2 mb-5">
            @foreach (var product in products)
            {
                <ProductCard Product="@product" ConversionRates="@conversions" SelectedCurrency="@selectedCurrency" OnBuy="async () => await AddToCart(product)"/>
            }
        </div>
    }
    else
    {
        @* Single product *@
        var single = products.Find(p => p.Id == Id);
        if (single is null)
        {
            <p>No product with this Id found</p>
        }
        else
        {
            <ProductDetail Product="single" ConversionRates="@conversions" SelectedCurrency="@selectedCurrency" OnBuy="async () => await AddToCart(single)"/>
        }
    }
}


@code
{
    private List<Product> products;

    public string selectedCurrency;
    public Dictionary<string, double> conversions = new Dictionary<string, double>();

    [Parameter] public int? Id { get; set; }
    ApplicationUser user = new ApplicationUser();
    AuthenticationState? authenticationState;

    private Header headerRef;

    private async Task AddToCart(Product product)
    {
        if (user is not null)
        {
            var item = user.CartItems.FirstOrDefault(i => i.ProductId == product.Id);
            if (item is null)
            {
                user.CartItems.Add(new CartItem { ProductId = product.Id, Quantity = 1, });
            }
            else
            {
                item.Quantity++;
            }

            await ws.UpdateUser(user);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Get products
            var result = await ws.GetAllProducts();
            products = result;

            // Get userdata
            authenticationState = await StateProvider.GetAuthenticationStateAsync();

            if (authenticationState.User.Identity.IsAuthenticated is true)
            {
                var stateUser = await UserManager.GetUserAsync(authenticationState.User);
                user = await ws.GetUserCart(stateUser);
            }

            await UpdateCurrency(null);

            StateHasChanged();
        }
    }

    private async Task UpdateCurrency(ChangeEventArgs? args)
    {
        conversions = new Dictionary<string, double>();
        if (args?.Value == null)
            selectedCurrency = Enum.GetName(typeof(Currencies), 0);
        else
            selectedCurrency = args.Value.ToString();

        // Create List of all conversion rates
        foreach (var product in products)
        {
            var pair = $"{product.Currency}_{selectedCurrency}";
            if (!conversions.ContainsKey(pair)) conversions.Add(pair, 1);
        }

        //Get all rates from API
        foreach (var pair in conversions.Keys)
        {
            ConversionRates rate = new ConversionRates();

            string url = $"https://api.api-ninjas.com/v1/exchangerate?pair={pair}";
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Add("X-Api-Key", "rzcEKMCdacInbfdrOWTAtQ==iTkLh33WEZMDmfiK");

            var client = ClientFactory.CreateClient();
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                rate = await JsonSerializer.DeserializeAsync
                    <ConversionRates>(responseStream);
            }

            conversions[pair] = rate.Rate;
            // product.Currency = (Currencies)Enum.Parse(typeof(Currencies), SelectedCurrency);
            // product.Price = product.Price * rate.Rate;
        }
    }

    public class ConversionRates
    {
        [JsonPropertyName("exchange_rate")] public double Rate { get; set; }
        [JsonPropertyName("currency_pair")] public string CurrencyPair { get; set; }
    }
}