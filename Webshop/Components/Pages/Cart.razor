@page "/cart"
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider StateProvider
@inject WebshopService ws
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@rendermode InteractiveServer

@if (user is not null)
{
    if (user.CartItems.Count == 0)
    {
        <p>Your shopping cart is empty!</p>
    }
    else
    {
        <div class="d-flex flex-column mx-auto justify-content-center mb-5" style="max-width: 600px">

            <div class="mt-4">
                <h4 class="text-decoration-underline">Shopping cart:</h4>
                <table class="table">
                    <thead>
                    <tr>
                        <th scope="col">Product name</th>
                        <th scope="col">Quantity</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in user.CartItems.ToList())
                    {
                        <tr>
                            <td>@(products.Find(p => p.Id == item.ProductId).Name)</td>
                            <td>@item.Quantity</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            
            <button class="btn btn-danger mb-5" @onclick="EmptyCart">Empty cart</button>

            @if (allProcessed == false)
            {
                <div class="alert alert-danger" role="alert">
                    Order could not be processed. Some items were not available (in full quantity). Quantity was updated.
                </div>
            }

            <EditForm Model="deliveryInfo" OnValidSubmit="HandleSubmit" FormName="CustomerInfo">
                <DataAnnotationsValidator />
                    <ValidationSummary />
                <div class="row mb-3">
                    <div class="col">
                        <InputText @bind-Value="user.Email" class="form-control" disabled="true"></InputText>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <InputText @bind-Value="deliveryInfo.FirstName" class="form-control" placeholder="First name"/>
                    </div>
                    <div class="col">
                        <InputText @bind-Value="deliveryInfo.LastName" class="form-control" placeholder="Last name"/>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <InputText @bind-Value="deliveryInfo.StreetName" class="form-control" placeholder="Street name"/>
                    </div>
                    <div class="col">
                        <InputText @bind-Value="deliveryInfo.StreetNumber" class="form-control" placeholder="Street number"/>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <InputText @bind-Value="deliveryInfo.PostalCode" class="form-control" placeholder="Postal code"/>
                    </div>
                    <div class="col">
                        <InputText @bind-Value="deliveryInfo.City" class="form-control" placeholder="City"/>
                    </div>
                </div>
                <button class="btn btn-primary" type="submit">Submit order!</button>
            </EditForm>
        </div>
    }
    
    
}
else
{
    <p>Log in to start shopping!</p>
}

@code
{
    ApplicationUser? user;
    AuthenticationState? authenticationState;

    DeliveryInfo deliveryInfo = new DeliveryInfo();

    List<Product> products = new List<Product>();

    bool allProcessed = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authenticationState = await StateProvider.GetAuthenticationStateAsync();
            if (authenticationState.User.Identity.IsAuthenticated is true)
            {
                var stateUser = await UserManager.GetUserAsync(authenticationState.User);
                user = await ws.GetUserCart(stateUser);
            }

            products = await ws.GetAllProducts();

            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine("HandleSubmit pressed");

        // Processed only if all items are available in full quantity
        allProcessed = await ws.ProcessOrder(user.CartItems);

        // Handle case when not all items available in full quantity
        if (allProcessed == true)
        {
            // Render confirmation page
            await GoToConfirmation();

            // Empty and update cart
            user.CartItems.Clear();
            await ws.UpdateUser(user);
        }
    }

    private async Task EmptyCart()
    {
        user.CartItems.Clear();
        await ws.UpdateUser(user);
    }

    private async Task GoToConfirmation()
    {
        // Gör om Items till ClientItems, annars blir det cirkelreferenser och vi kan inte lägga till det i sessionStorage
        List<ClientItem> clientItems = user.CartItems.Select(i => new ClientItem { ProductName = products.Find(p => p.Id == i.ProductId).Name, Quantity = i.Quantity }).ToList();
        // Här lägger vi våra ClientItems i sessionStorage så vi kan hämta ut dem därifrån inne i Client
        await sessionStorage.SetItemAsync(user.Id, clientItems);
        await sessionStorage.SetItemAsync("DeliveryInfo", deliveryInfo);
        NavigationManager.NavigateTo("/orderconfirmation");
    }

    class ClientItem
    {
        public string ProductName { get; set; }
        public int Quantity { get; set; }
    }


}